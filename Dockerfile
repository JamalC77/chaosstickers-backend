# Dockerfile\n\n# Use an official Node.js runtime as a parent image\n# Choose a version compatible with your project (e.g., 18, 20)\n# Using Alpine Linux variants can be smaller but sometimes lack libraries needed by native modules.\n# Start with a standard Debian-based image (like 'bookworm') for better compatibility.\nFROM node:20-bookworm-slim\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy package.json and package-lock.json (or yarn.lock)\nCOPY package*.json ./\n# If using Prisma, copy the schema\nCOPY prisma ./prisma/\n\n# Install app dependencies\n# Use --omit=dev if you don't need devDependencies in production\nRUN npm install --omit=dev\n\n# If using Prisma, generate the client\n# Use --no-engine if your database is remote and you don't need the query engine binaries\n# Or omit --no-engine if Prisma needs its engine locally (e.g., for migrations during build)\nRUN npx prisma generate --no-engine\n\n# Bundle app source inside Docker image\nCOPY . .\n\n# Build TypeScript code\nRUN npm run build\n# Or your specific build command if different\n\n# Make port 3001 available to the world outside this container (adjust if needed)\nEXPOSE 3001\n\n# Define environment variable if needed (e.g., for NODE_ENV)\n# ENV NODE_ENV=production\n\n# Command to run the application\nCMD ["node", "dist/server.js"]
